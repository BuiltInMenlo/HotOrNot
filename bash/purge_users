#!/bin/bash


# \\~~*~~*[~*~]~*~~*~~*~~\_
# \\~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~\_


#-- change to script's dir if not already there
if [[ `pwd` != `dirname $0` ]]; then cd `dirname $0`; fi
	
	
#--#--#--#--#--#--#--#--#:#--#--#--#--#--#--#--#--#

#-- set tier to live
subdomain_api="admin-dev"

#-- api attribs
block_url="http://${subdomain_api}.letsvolley.com/admin/block_user.php"
wipe_url="http://${subdomain_api}.letsvolley.com/admin/wipe_user.php"
login_api="volley:\$uper\$mack"

#-- set actions to happen
isDryRun_flg=false


##--#--#--#--#--#--#--#--#--#--##:||:##--#--#--#--#--#--#--#--#--#--##

while getopts "st" optname # --//> there's a '-s' or '-t'
	do # --/ loop thru the params
		case "$optname" in

		"s") # )-/> passed in '-s'
			#-- set tier to stage
			subdomain_api="admin-stage"
			;;
			
		"t") # )-/> passed in '-t'
			#-- set dry run
			isDryRun_flg=true
			;;

		"?") # )-/> anything else
			echo "Unknown option $OPTARG"
			exit 1;
			;;

		":") # )-/> no arg
			echo "No argument value for option $OPTARG"
			exit 1;
			;;

		*) # )-/> shouldn't occur
			echo "Unknown error"
			exit 1;
			;;
	esac
done


##--#--#--#--#--#--#--#--#--#--##:||:##--#--#--#--#--#--#--#--#--#--##


while read line; do username="${line}" ; 
	#// if $isDryRun_flg; then
	#// 	printf "Checking for user '%s' from (%s.letsvolley.com)... " "${username}" "${subdomain_api}"
	#// 	result=$(curl --request POST --location "${block_url}" --user "${login_api}" --data-urlencode "username=${username}" --silent | sed -E 's/\<(\/)?pre\>//g' | grep --max-count 1 --only-matching "${username}")	
	#// fi

	#//printf "Confirm purge user '%s' from %s.letsvolley.com? [Y/n]" "${username}" "${subdomain_api}" ; read affirm
	#//if [[ -n "$affirm" || "$affirm" == "Y"]]; then affirm=
	
	#-- current time when  
	cta_ts=$(date +%d\/%m\/%Y\ %H\:%M\:%S)
	
	# call block user
	printf "Blocking user '%s' from (%s.letsvolley.com)... " "${username}" "${subdomain_api}"
	result=$(curl --request POST --location "${block_url}" --user "${login_api}" --data-urlencode "username=${username}" --silent | sed -E 's/\<(\/)?pre\>//g' | grep --max-count 1 --only-matching "${username}")

	#-- check for user json
	if [ -n "$result" ]; then 
		
		echo "Completed!"
		printf "%s\tPASS\tBLOCK\t%s.letsvolley.com\t%s\n" "${cta_ts}" "${subdomain_api}" "${username}" >> ./purge.log
	
		# call wipe user
		printf "Wiping user '%s' from (%s.letsvolley.com)... " "${username}" "${subdomain_api}"
		result=$(curl --request POST --location "${wipe_url}" --user "${login_api}" --data-urlencode "username=${username}" --silent | sed -E 's/\<(\/)?pre\>//g' | grep --max-count 1 --only-matching "${username}")

		#-- check for user json
		if [ -n "$result" ]; then 
			echo "Completed!"
			printf "%s\tPASS\tWIPE\t%s.letsvolley.com\t%s\n" "${cta_ts}" "${subdomain_api}" "${username}" >> ./purge.log
		
		else 
			echo "Not found!"
			printf "%s\tFAIL\tSANS\t%s.letsvolley.com\t%s\n" "${cta_ts}" "${subdomain_api}" "${username}" >> ./purge.log
		fi
	else 
		echo "Not found!"
		printf "%s\tFAIL\tSANS\t%s.letsvolley.com\t%s\n" "${cta_ts}" "${subdomain_api}" "${username}" >> ./purge.log	
	fi
	
	#-- divider between each user
	printf "[%s=]\n" $(printf "=-"%.0s {1..48})
	
done < ./purge.conf


##--#--#--#--#--#--#--#--#--#--##:||:##--#--#--#--#--#--#--#--#--#--##

#-- exit w/o error
exit 0;


# //~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~*~~/'
# //~~*~~*~~*~~*~~*~~*~~/'




#// dev
#-- http://api-stage.letsvolley.com/admin/wipe_user.php

#// live
#-- http://admin.letsvolley.com/admin/wipe_user.php


#// not found result
#-- result="Array ( [0] => blocking: [1] => BIM_Model_User Object ( ) )"
