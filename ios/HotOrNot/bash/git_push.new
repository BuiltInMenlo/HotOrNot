#!/bin/bash
# FILE: git_push
#
# 
# SYNOPSIS:
#
#     git_push [ -p ] "comment"
# 
# 
# DESCRIPTION:
#
# 	  Adds and commits all changes w/ messsage, then pushes 
#     the local repository into its remote github repo.
#     Optionally do a pull from the remote repo to merge any
#     new changes before pushing.
# 
#  
# 	  comment - the comment to include w/ this push
#     -p - merge the remote changes before pushing
# 
# 
# EXAMPLE:
# 
#     Adds / commit local repo, pull new changes, then push up to remote repo
#     git_push -p "Adding unit tests"
# 


#stderr msg
usage_msg=$(printf "USAGE:\n git_push [ -p ] \"Adding unit tests\"\n")


#-- current dir not script's, change over
if [ `pwd` != `dirname $0` ]; then
	cd `dirname $0`; fi

#-- move up one dir to proj root
cd ../


#-- no 1st param (comment), exit
if [ ! "$1" ]; then
	printf "\nUSAGE: \$git_push comment\n\$git_push \"Adding new libs to project\"\n"; exit 1; fi


#-- perform add & commit operations
git add * && git commit -m "${1}"


#-- check for merge
while getopts "p" optname #--//> there's a '-p'
	do #--/ loop thru the params
		case "${optname}" in #  -/> set flag based on char
			
			"p") # )-/> passed in '-p'
				#-- fetch & merge remote changes
				git pull origin
				
				#//git fetch origin --dry-run --verbose
				#//git merge origin/master --verbose
			;;
			
			"?") # )-/> anything else
				printf "Unknown option %s\n%s" $OPTARG $usage_msg; exit 1
			;;
			
			*) # )-/> shouldn't occur
				printf "Unknown error\n%s" $usage_msg; exit 1
			;;
	esac
done


#-- terminate w/o error
exit 0;