#!/bin/bash


##--#--#--#--#--#--#--#--#:#--#--#--#--#--#--#--#--##


#-- default username
username="snap"

#-- set tier to stage
subdomain_api="admin-stage"

#-- parameter flags
isKillSimulator_flg=true
isPurgeUser_flg=true

#-- check for parameter flags
while getopts "klp" optname # --//> there's a '-k' '-l' or '-p'
	do
		case "$optname" in
			"k") # )-/> passed in '-k'
				#-- set to not kill simulator
				isKillSimulator_flg=false
				;;
				
			"l") # )-/> passed in '-l'
				#-- set tier to live
				subdomain_api="admin"
				;;

			"p") # )-/> passed in '-p'
				#-- set to don't purge user
				isPurgeUser_flg=false
				;;

			"?") # )-/> anything else
				echo "Unknown option $OPTARG"
				exit 1;
				;;

			":") # )-/> no arg
				echo "No argument value for option $OPTARG"
				exit 1;
				;;

			*) # )-/> shouldn't occur
				echo "Unknown error"
				exit 1;
				;;
	esac
done


#-- kill the simulator
if $isKillSimulator_flg; then
	
	# store pIDs of the processes
	simulator_pid=`ps aux -cj | grep -i "iPhone Simulator" | awk '{print $2}'`
	bridge_pid=`ps aux -cj | grep -i "SimulatorBridge" | awk '{print $2}'`
	
	# kill processes gracefully
	if [ $simulator_pid ] && [ $bridge_pid ]; then
		
		printf "Gracefully killing the simulator..."
		if [ $simulator_pid ]; then # --/> terminate the process
			kill -15 $simulator_pid; fi
		
		if [ $bridge_pid ]; then # --/> terminate the process
			kill -15 $bridge_pid; fi
		
		echo " Success!"
		
	else # --/> no pID(s)
		echo "Didn't find the simulator running..."; fi
		
	# delete app from simulator(s)
	app_paths=$(find ~/Library/Application\ Support/iPhone\ Simulator -name "Selfieclub.app")
	if [ ! -z "$app_paths" ]; then
		printf "Deleting Selfieclub from simulator(s)..."
		
		for (( i=1; i<=`echo "${app_paths}" | wc -l`; i++ )); do
			curr_line=$(echo "${app_paths}" | sed -n "${i}"p);
			parent_path=$(dirname "$curr_line")
			rm -R "${parent_path}"
		done
		echo " Done!"
		
	else echo "Didn't find the app installed..."; fi
else echo "Skipping simulator cleanup..."; fi



# block & wipe from db
if $isPurgeUser_flg; then
	
	#-- api attribs
	block_url="http://${subdomain_api}.letsvolley.com/admin/block_user.php"
	wipe_url="http://${subdomain_api}.letsvolley.com/admin/wipe_user.php"
	login_api="volley:\$uper\$mack"
	
	
	#-- call block user
	printf "\nBlocking user '%s' from (%s.letsvolley.com)... " "${username}" "${subdomain_api}"
	result=$(curl --request POST --location "${block_url}" --user "${login_api}" --data-urlencode "username=${username}" --silent | sed -E 's/\<(\/)?pre\>//g' | grep --max-count 1 --only-matching "${username}")

	#-- check result for username
	if [ -n "$result" ]; then echo "Completed!"

		#-- call wipe user
		printf "Wiping user '%s' from (%s.letsvolley.com)... " "${username}" "${subdomain_api}"
		result=$(curl --request POST --location "${wipe_url}" --user "${login_api}" --data-urlencode "username=${username}" --silent | sed -E 's/\<(\/)?pre\>//g' | grep --max-count 1 --only-matching "${username}")

		#-- check result for username
		if [ -n "$result" ]; then echo "Completed!" ; else echo "Not found!"; fi
		
	else printf "Not found!\nSkipping wipe...\n"; fi		
else printf "\nSkipping purge of user '%s' from (%s.letsvolley.com)...\n" "${username}" "${subdomain_api}"; fi



#-- exit w/o error
exit 0;


##--#--#--#--#--#--#--#--#:#--#--#--#--#--#--#--#--##


#// dev //#
#-- http://api-stage.letsvolley.com/admin/wipe_user.php

#// live //#
#-- http://admin.letsvolley.com/admin/wipe_user.php


#// not found result //#
#-- result="Array ( [0] => blocking: [1] => BIM_Model_User Object ( ) )"

