<?php 

class BIM_Config{
    
    static protected $data = array();
    
    public static function growthEmailInvites(){
        return (object) array(
        	'to_email' => 'shane@shanehill.com',
        	'to_name' => 'leyla',
        	'from_email' => 'test@shanehill.com',
        	'from_name' => 'BIM',
        	'subject' => 'email test',
        );
    }
    
    public static function queueFuncs(){
        return array(
            'BIM_Controller_Votes' => array(
                'upvoteChallenge' => array( 'queue' => false ),
            )
        );
    }
    
    public static function staticFuncs(){
        return array(
            'BIM_Controller_Discover' => array(
                'getTopChallengesByVotes' => array( 
                    'redirect' => false,
                	'url' => "http://54.243.163.24/getTopChallengesByVotes.js",
                	"path" => '/var/www/discover.getassembly.com/getTopChallengesByVotes.js.gz'
                ),
            ),
        	'BIM_Controller_Votes' => array(
                'getChallengesByDate' => array( 
                    'redirect' => false,
                	'url' => "http://54.243.163.24/getChallengesByDate.js",
                	"path" => '/var/www/discover.getassembly.com/getChallengesByDate.js.gz'
                ),
                'getChallengesByActivity' => array( 
                    'redirect' => false,
                	'url' => "http://54.243.163.24/getChallengesByActivity.js",
                	"path" => '/var/www/discover.getassembly.com/getChallengesByActivity.js.gz'
                ),
            )
        );
    }
    
    public static function instagram(){
        return (object) array(
            'api' => (object) array(
                'client_id' => 'foo',
                'client_secret' => 'bar',
                'access_token_url' => 'https://api.instagram.com/oauth/access_token',
                'redirect_url' => "http://54.243.163.24/instagram_oauth.php"
        
            ),
            'harvestSelfies' => (object) array(
                'secsInPast' => 3600 * 24,
                'maxItems' => 10000,
                'tags' => array(
                    'selfie', 'me', 'self', 'selfpic', 'bff', 'myface', 'rateme', 'duckface'
                )
            )
        );
    }
    
    public static function twilio(){
        return (object) array(
            'api' => (object) array(
                'accountSid' => 'foo',
                'authToken' => 'bar',
                'number' => '2394313268'
            ),
        );
    }
    
    public static function tumblr(){
        return (object) array(
            'api' => (object) array(
                'consumerKey' => 'foo',
                'consumerSecret' => 'bar',
            ),
            'harvestSelfies' => (object) array(
                'secsInPast' => 3600 * 24,
                'maxItems' => 10000,
                'tags' => array(
                    'selfie', 'me', 'self', 'selfpic', 'bff', 'myface', 'rateme', 'duckface'
                )
            )
        );
    }
    
    public static function gearman(){
        return (object) array(
            'servers' => array(  
                array(
                    'host' => '127.0.0.1',
                    'port' => 4730
                ),
            ),
        );
    }
    
    public static function db(){
        return (object) array(
        	'locatorClassName' => 'BIM_Data_Locator_Simple',
        	'locatorClassPath' => 'BIM/Data/Locator/Simple.php',
        	'nodes' => array(
        		(object) array(
        			'writer' => (object) array(
        				'host' => '127.0.0.1',
        				'user' => 'root',
        				'pass' => '',
        				'dbname' => 'foo'
        			),
        			'reader' => (object) array(
        				'host' => '127.0.0.1',
        				'user' => 'root',
        				'pass' => '',
        				'dbname' => 'foo'
        			),
        		),
        	),
        );
    }
    
    public static function adTags( $network = '' ){
        if( !$network ){
            $network = self::$defaultNetwork;
        }
        if( !isset(self::$adTags[ $network ]) || ( time() - self::$lastTagFetch >= 300 ) ){
            self::getTags();
            if( !isset( self::$adTags[ $network ] ) ){
                self::$adTags[ $network ] = self::$adTags[ self::$defaultNetwork ];
            }
            self::$lastTagFetch = time();
        }
        return self::$adTags[ $network ];
        
    }
    
    protected static function getTags(){
        $dao = new BIM_DAO_Mysql_Growth( self::db() );
        $tagArray = $dao->getTags();
        foreach( $tagArray as $tagData ){
            if( $tagData->type == 'ad' ){
                self::$adTags[ $tagData->network ] = json_decode( $tagData->tags );
            } else {
                self::$authenticTags[ $tagData->network ] = json_decode( $tagData->tags );
            }
        }
    }
    
    public static function saveTags( $data ){
        if( !isset( $data->type ) || !preg_match('/authentic|ad/', $data->type) ){
            $data->type = 'authentic';
        }
        if( !isset( $data->network ) ){
            $data->network = self::$defaultNetwork;
        }
        $data->tags = explode(',', $data->tags );
        $data->tags = json_encode($data->tags);
        
        $dao = new BIM_DAO_Mysql_Growth( self::db() );
        $dao->saveTags( $data );
    }
    
    public static function authenticTags( $network = '' ){
        if( !$network ){
            $network = self::$defaultNetwork;
        }
        if( !isset(self::$authenticTags[ $network ]) || ( time() - self::$lastTagFetch >= 300 ) ){
            self::getTags();
            if( !isset( self::$authenticTags[ $network ] ) ){
                self::$authenticTags[ $network ] = self::$authenticTags[ self::$defaultNetwork ];
            }
            self::$lastTagFetch = time();
        }
        return self::$authenticTags[ $network ];
    }
    
    
    
    /*  Quote funcs  */
    public static function saveQuotes( $data ){
        if( !isset( $data->type ) || !preg_match('/authentic|ad/', $data->type) ){
            $data->type = 'authentic';
        }
        if( !isset( $data->network ) ){
            $data->network = self::$defaultNetwork;
        }
        $data->quotes = explode(',', $data->quotes );
        $data->quotes = json_encode($data->quotes);
        
        $dao = new BIM_DAO_Mysql_Growth( self::db() );
        $dao->saveQuotes( $data );
    }
    
    protected static function getQuotes(){
        $dao = new BIM_DAO_Mysql_Growth( self::db() );
        $quoteArray = $dao->getQuotes();
        foreach( $quoteArray as $quoteData ){
            if( $quoteData->type == 'ad' ){
                self::$adQuotes[ $quoteData->network ] = json_decode( $quoteData->quotes );
            } else {
                self::$authenticQuotes[ $quoteData->network ] = json_decode( $quoteData->quotes );
            }
        }
    }
    
    public static function authenticQuotes( $network = '' ){
        if( !$network ){
            $network = self::$defaultNetwork;
        }
        if( !isset(self::$authenticQuotes[ $network ]) || ( time() - self::$lastQuoteFetch >= 300 ) ){
            self::getQuotes();
            if( !isset( self::$authenticQuotes[ $network ] ) ){
                self::$authenticQuotes[ $network ] = self::$authenticQuotes[ self::$defaultNetwork ];
            }
            self::$lastQuoteFetch = time();
        }
        return self::$authenticQuotes[ $network ];
    }
    
    public static function adQuotes( $network = '' ){
        if( !$network ){
            $network = self::$defaultNetwork;
        }
        if( !isset(self::$adQuotes[ $network ]) || ( time() - self::$lastQuoteFetch >= 300 ) ){
            self::getQuotes();
            if( !isset( self::$adQuotes[ $network ] ) ){
                self::$adQuotes[ $network ] = self::$adQuotes[ self::$defaultNetwork ];
            }
            self::$lastQuoteFetch = time();
        }
        return self::$adQuotes[ $network ];
        
    }
}
